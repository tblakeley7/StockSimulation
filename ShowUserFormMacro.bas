Attribute VB_Name = "ShowUserFormMacro"
Option Explicit
Public msg As Variant
Public cn As New ADODB.Connection
Public rs As New ADODB.Recordset
Public rowcount As Integer
Public Data As Variant
Public StockName As Variant
Public Index As Long
Public recordsetindex As Long
Public TradingStrat As String
Public SaveAsString As String
Public fd As Office.FileDialog
Public file As Variant
Public TempArray(0) As Variant
Public RunAverage As Single
Sub Main()
'Show Form
MotionUserForm.Show
End Sub

Sub Query1()

Dim SQL As String
Dim StockDataArray(100, 1) As Variant

With cn
    .ConnectionString = "Data Source=" & ThisWorkbook.Path & "\a4Database_coll9410.mdb"
    .Provider = "Microsoft.ACE.OLEDB.12.0"
    .Open
End With

SQL = "SELECT Stocks.Stock, Stocks.[Intial Stock Price] FROM Stocks"

rs.Open SQL, cn
'+===========================================================================================================+
rowcount = 1
With rs
    Do Until .EOF
        'Set Default Titles for the Stock Data List Box
        StockDataArray(0, 0) = "Stock 3 Character ID"
        StockDataArray(0, 1) = "Intial Stock Price"
        'Add Data to the Array
        StockDataArray(rowcount, 0) = .Fields("Stock")
        StockDataArray(rowcount, 1) = .Fields("Intial Stock Price")
        rowcount = rowcount + 1
        .MoveNext
    Loop
End With
MotionUserForm.StockPriceLstBX.List = StockDataArray
MotionUserForm.StockPriceLstBX.ListIndex = 0
'+===========================================================================================================+

rs.Close
'Close the connection
cn.Close

End Sub
Sub CreateWordReport()


Application.ScreenUpdating = False

'Puts chart into a word document.
Dim wordApp As New Word.Application
Dim wordDoc As Word.Document
Set wordApp = CreateObject("Word.Application")
wordApp.Visible = True
'selects chart on sheet1
Worksheets("BrownianMotion").ChartObjects(1).Copy
With wordApp
            .Documents.Add
            With .Selection
                .Font.Size = 14
                .Font.Bold = True
                .ParagraphFormat.Alignment = 1
                .TypeText Text:="Geometric Brownian motion (GBM) for: " & StockName
                .TypeParagraph
                .TypeText Text:="Date :" & Date
                
                .Font.Size = 13
                .Font.Italic = True
                .ParagraphFormat.Alignment = wdAlignParagraphLeft
                .TypeText Text:="Initial Stock Price - " & Data
                .TypeText Text:="Potential Trading Strategy on " & StockName & " - " & TradingStrat
                .TypeText Text:="Average of all n runs for the Geometric Browian Motion Simulation today - " & RunAverage
                .TypeParagraph
                
                .Font.Size = 12
                .ParagraphFormat.Alignment = 0
                .Font.Bold = False
                .Font.Italic = False
                .TypeText Text:="To find my trading strategy I used Geometric Brownian Motion. " _
                 & "The Trading Strategy is based on the number of Long vs. Short positions available for each nth run. " _
                & " Geometric Brownian motion is still a new Stochastic Model developed only 30 years ago. More analysis should" _
                & " be conducted to compare the implied volatility of the stock vs. the trading strategy updated in the Access Database." & _
                  " This is to detect market deficiencies for over and undervalued stocks."
                
                .TypeParagraph
                .TypeText Text:="The implied volatility of the stock is a distribution of stock volatilities generated by a calibration model that takes a large " & _
                                "amount of historical stock data."


                .TypeParagraph
                .TypeText Text:="-NOTE-"
                
                .TypeParagraph
                .TypeText Text:=" As the nth simulation reaches the end of t, the volatility and the law of larger numbers" _
                & " will take the stock prices to extreme values. The model is theoretically designed to run more than 256 (which is the limit of adding a new series to a chart) times (Ideally >1000 times). " _
                & "If GBM is run for a large number of times, taking the stock price variations within a relevant stock price range will help you understand the real value of the stock in the short term."
                
                .TypeParagraph
                
            End With
            'pastes the chart
        wordApp.Selection.Paste
        
        'Save the word document to the path in the SaveAsTXTBX, file name = StockName & Date
        .ActiveDocument.SaveAs Filename:=TempArray(0) & "\GeometricBrownianMotion_For_Stock_" & "_" & StockName & ".docx"
End With

'Kill the object
wordApp.Quit
Set wordApp = Nothing

Worksheets.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
Application.ScreenUpdating = True

End Sub

Sub Query2()
'Run Second Query to Update Trading Strategy in Database for the Selected Stock
Dim Cell As Range
Dim SQL1 As String
Dim LongPositionCounter As Byte
Dim ShortPositionCounter As Byte
Dim reccount As Long

LongPositionCounter = 0
ShortPositionCounter = 0

With Worksheets("BrownianMotion").Range("B1")
    For Each Cell In Range(.Offset(1, 0), .End(xlDown))
        'If the value at the end of each GBM simulation(s) is greater than the orginal stock price add to long counter
        If Cell.Value > Data Then
            LongPositionCounter = LongPositionCounter + 1
        'Elseif the Value at the end of each GBM simulation(s) is less than the original stock price add to short counter
        ElseIf Cell.Value < Data Then
            ShortPositionCounter = ShortPositionCounter + 1
        End If
    Next
End With

'If the User runs the simulation for a large n: the Law of Large Numbers should play a role in the accuracy in the deciding trading strategy (Longing Stock vs. Shorting the Stock)
If LongPositionCounter > ShortPositionCounter Then
    TradingStrat = "Long Position"
Else
    TradingStrat = "Short Position"
End If

With cn
    .ConnectionString = "Data Source=" & ThisWorkbook.Path & "\a4Database_coll9410.mdb"
    .Provider = "Microsoft.ACE.OLEDB.12.0"
    .Open
End With

SQL1 = "SELECT Stocks.Stock, Stocks.[Intial Stock Price],Stocks.[Trading Strategy] FROM Stocks " & _
       "WHERE (((Stocks.Stock)=" & Chr(34) & StockName & Chr(34) & ")" & " AND ((Stocks.[Intial Stock Price])=" & Data & "))"
       
'Open the Recordset with the SQL1 query to update the selected stock in the user form with its calculated trading strategy
rs.Open SQL1, cn, adOpenDynamic, adLockOptimistic

With rs
    Do Until .EOF
        For reccount = 1 To MotionUserForm.StockPriceLstBX.ListIndex
            If reccount = MotionUserForm.StockPriceLstBX.ListIndex Then
                .Fields("Trading Strategy").Value = TradingStrat
                .Update
            Exit Do
            End If
        Next
        .MoveNext
    Loop
End With

rs.Close
'Close the connection
cn.Close

If MotionUserForm.WordReportCHKBX.Value = True Then
Call ShowUserFormMacro.CreateWordReport

MsgBox "The Simulation was successful!" & vbNewLine & vbNewLine & "The Trading Strategy for " & StockName & "'s run " & " Today (" & Date & ")" & " is a " & TradingStrat & "." & vbNewLine _
        & vbNewLine & "-The word report for the simulation is saved here: " & TempArray(0) & "." _
        & vbNewLine & "-The Trading Strategy Field has been updated with the market position for the Stock " & StockName & ".", vbInformation, "GBM Simulation Complete"
Else
MsgBox "The Simulation was successful!" & vbNewLine & vbNewLine & "The Trading Strategy for " & StockName & "'s run " & " Today (" & Date & ")" & " is a " & TradingStrat & "." & vbNewLine _
        & vbNewLine & "-The Trading Strategy Field has been updated with the market position for the Stock " & StockName & ".", vbInformation, "GBM Simulation Complete"
'Do Not create word report Since User Does not want to create the report
End If

End Sub
